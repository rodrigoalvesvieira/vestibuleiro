{"version":3,"sources":["modules/tab.js"],"names":["angular","controller","provider","$scope","$element","defaults","this","self","$options","forEach","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","push","$remove","index","indexOf","activeIndex","$viewChangeListeners","splice","$active","value","$setActive","$get","$tab","scope","require","transclude","directive","templateUrl","attr","template","link","postLink","ngModelCtrl","bsTabsCtrl","$setViewValue","$formatters","attrs","modelValue","bsActivePane","parsedBsActivePane","assign","$parse","$watch","newValue","oldValue","addClass","$window","$animate","$sce","title","trustAsHtml","animation","controllers","render","active","element","$observe","disabled","$on"],"mappings":"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","file":"modules/tab.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function(key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function(pane) {\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function(pane) {\n        var index = self.$panes.indexOf(pane);\n        var activeIndex = self.$panes.$active;\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        }\n        else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        self.$setActive(activeIndex);\n      };\n\n      self.$panes.$active = 0;\n      self.$setActive = $scope.$setActive = function(value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n    };\n\n    this.$get = function() {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function(element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue * 1);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue * 1);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function(newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Add animation class\n        if(bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function(newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function() {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render() {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          var active = bsTabsCtrl.$panes.$active;\n          $animate[index === active ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}